<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Phuket Places: A Learning App</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #f3f4f6;
        }
        .container {
            max-width: 600px;
            width: 95%;
            padding: 2.5rem;
            background-color: #ffffff;
            border-radius: 1.5rem;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            text-align: center;
            transition: transform 0.3s ease-in-out;
        }
        .container:hover {
            transform: translateY(-5px);
        }
        .microphone-button {
            transition: all 0.3s ease-in-out;
        }
        .microphone-button.listening {
            animation: pulse-ring 1.2s cubic-bezier(0.215, 0.61, 0.355, 1) infinite;
        }
        .feedback {
            font-weight: 600;
            padding: 0.75rem 1.5rem;
            border-radius: 9999px;
            margin-top: 1.5rem;
            color: #ffffff;
            transition: all 0.3s ease-in-out;
            transform: scale(0.95);
            opacity: 0;
            display: none;
        }
        .feedback.show {
            transform: scale(1);
            opacity: 1;
            display: block;
        }
        @keyframes pulse-ring {
            0% {
                transform: scale(0.3);
                opacity: 0.8;
            }
            100% {
                transform: scale(1.5);
                opacity: 0;
            }
        }
        .image-container {
            height: 250px;
            overflow: hidden;
            border-radius: 1rem;
            margin-bottom: 2rem;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }
        .image-container img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
    </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen p-4">

    <div class="container">
        <h1 class="text-3xl md:text-4xl font-extrabold text-gray-900 mb-6">Guess the Place</h1>
        
        <div class="image-container mb-6">
            <img id="location-image" src="" alt="Location image">
        </div>

        <p class="text-lg text-gray-700 mb-6" id="question-text">Where is this place?</p>
        
        <div class="flex flex-col md:flex-row items-center justify-center space-y-4 md:space-y-0 md:space-x-4">
            <button id="speak-btn" class="microphone-button inline-flex items-center justify-center p-3 rounded-full bg-blue-600 text-white shadow-lg hover:bg-blue-700 focus:outline-none focus:ring-4 focus:ring-blue-300 transition-all duration-300">
                <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10 8a3 3 0 100 6 3 3 0 000-6zM10 0a10 10 0 100 20 10 10 0 000-20zm0 18a8 8 0 110-16 8 8 0 010 16zM10 5a1 1 0 00-1 1v6a1 1 0 102 0V6a1 1 0 00-1-1z"/></svg>
            </button>
            <button id="read-aloud-btn" class="px-6 py-3 bg-purple-600 text-white font-bold rounded-full shadow-lg hover:bg-purple-700 focus:outline-none focus:ring-4 focus:ring-purple-300 transition-all duration-300">
                ✨ Read Aloud
            </button>
            <button id="gemini-info-btn" class="px-6 py-3 bg-green-600 text-white font-bold rounded-full shadow-lg hover:bg-green-700 focus:outline-none focus:ring-4 focus:ring-green-300 transition-all duration-300">
                ✨ More Info
            </button>
            <button id="skip-btn" class="px-6 py-3 bg-gray-400 text-white font-bold rounded-full shadow-lg hover:bg-gray-500 focus:outline-none focus:ring-4 focus:ring-gray-300 transition-all duration-300">
                Next
            </button>
        </div>
        
        <p id="transcript-text" class="text-sm md:text-base text-gray-500 mt-4 mb-4" style="min-height: 1.5rem;">Waiting for your answer...</p>
        
        <div id="feedback-message" class="feedback"></div>

        <button id="next-btn" class="mt-6 px-8 py-3 bg-gray-300 text-gray-800 font-bold rounded-full shadow-lg hover:bg-gray-400 focus:outline-none focus:ring-4 focus:ring-gray-300 transition-all duration-300">
            Next
        </button>
        
        <div id="info-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden">
            <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white">
                <div class="text-left">
                    <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4" id="modal-title">More Information</h3>
                    <div class="mt-2 text-sm text-gray-500" id="modal-content">
                        <!-- Content will be injected here -->
                    </div>
                    <div class="mt-4 text-center">
                        <button id="close-modal-btn" class="px-4 py-2 bg-blue-600 text-white font-bold rounded-full">Close</button>
                    </div>
                    
                </div>
            </div>
        </div>
        
    </div>

    <script>
        const API_KEY = ""; // Leave this empty, it will be provided by the runtime
        const GENERATE_CONTENT_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${API_KEY}`;
        const TTS_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-tts:generateContent?key=${API_KEY}`;

        // Check for Web Speech API support
        if (!('webkitSpeechRecognition' in window)) {
            // Note: Use a modal/dialog instead of alert() in production
            alert('Your browser does not support Speech Recognition. Please use Google Chrome or Microsoft Edge.');
        } else {
            const recognition = new webkitSpeechRecognition();
            recognition.continuous = false;
            recognition.lang = 'en-US'; // Set language to English to handle various accents
            recognition.interimResults = false;

            const questions = [
                {
                    image: "https://www.avistahideawayphuketresort.com/wp-content/uploads/sites/42/2023/05/26842616496_4630bcec3e_o.jpg",
                    question: "This cape is one of the most famous sunset viewpoints in Phuket. What is its name?",
                    correctAnswer: "Phromthep Cape"
                },
                {
                    image: "https://www.thavornpalmbeach.com/upload/blog-files/1733914361.571.jpg",
                    question: "Which popular beach is known for its vibrant nightlife?",
                    correctAnswer: "Patong Beach"
                },
                {
                    image: "https://media1.thrillophilia.com/filestore/086879l8unimke2ll4jgd6hxlabw_IC_3_42709949ff.jpg",
                    question: "Where is this place?",
                    correctAnswer: "Phuket Old Town"
                },
                {
                    image: "https://upload.wikimedia.org/wikipedia/commons/5/56/The_Big_Buddha%2C_Phuket.jpg",
                    question: "This large statue is located on Nakkerd Hill. What is it called?",
                    correctAnswer: "Big Buddha"
                },
                {
                    image: "https://cdn-634917f2c1ac189bf80b388b.closte.com/wp-content/uploads/2020/02/Untitled-1-1600x836.jpg",
                    question: "This is one of the most important Buddhist temples in Phuket. What is its name?",
                    correctAnswer: "Chalong Temple"
                },
                {
                    image: "https://bydlofts.com/cdn-cgi/image/quality=80,format=auto,onerror=redirect,metadata=none/wp-content/uploads/2023/02/byd-lofts-phuket-chillva-market-in-phuket-3.jpg",
                    question: "Which famous night market in Phuket is known for its container shops and bohemian vibe?",
                    correctAnswer: "Chillva Night Market"
                },
                {
                    image: "https://www.joeysantini.com/app/uploads/2017/09/IMG_5866-1.jpg",
                    question: "This place offers a breathtaking panoramic view of the coastline and is a popular spot for hiking. What is it called?",
                    correctAnswer: "Laem Krating"
                }
            ];

            let currentQuestionIndex = 0;

            const speakBtn = document.getElementById('speak-btn');
            const nextBtn = document.getElementById('next-btn');
            const skipBtn = document.getElementById('skip-btn');
            const locationImage = document.getElementById('location-image');
            const transcriptText = document.getElementById('transcript-text');
            const feedbackMessage = document.getElementById('feedback-message');
            const questionText = document.getElementById('question-text');
            const geminiInfoBtn = document.getElementById('gemini-info-btn');
            const infoModal = document.getElementById('info-modal');
            const modalTitle = document.getElementById('modal-title');
            const modalContent = document.getElementById('modal-content');
            const closeModalBtn = document.getElementById('close-modal-btn');
            const readAloudBtn = document.getElementById('read-aloud-btn');

            // Function to show modal
            function showModal(title, content) {
                modalTitle.textContent = title;
                modalContent.textContent = content;
                infoModal.classList.remove('hidden');
            }

            // Function to close modal
            closeModalBtn.addEventListener('click', () => {
                infoModal.classList.add('hidden');
            });
            window.addEventListener('click', (event) => {
                if (event.target === infoModal) {
                    infoModal.classList.add('hidden');
                }
            });

            // A helper function for fuzzy string matching.
            function isCloseMatch(input, target) {
                const normalizedInput = input.trim().toLowerCase();
                const normalizedTarget = target.trim().toLowerCase();

                // Check for direct inclusion
                if (normalizedInput.includes(normalizedTarget)) {
                    return true;
                }

                // Check for phonetic similarities (very basic)
                const phoneticMap = {
                    'chalong': ['chalong', 'chalang'],
                    'phromthep': ['promtep', 'phromthape'],
                    'buddha': ['buda', 'butha'],
                    'patong': ['patong'],
                    'old phuket town': ['old phuket town', 'old phuket'],
                    'chillva night market': ['chillva', 'chilwa', 'chillva market'],
                    'laem krating': ['laem krating', 'lame krating', 'laem krating']
                };

                for (const key in phoneticMap) {
                    if (normalizedTarget.includes(key)) {
                        for (const variant of phoneticMap[key]) {
                            if (normalizedInput.includes(variant)) {
                                return true;
                            }
                        }
                    }
                }
                return false;
            }

            // --- Function to update UI with current question ---
            function loadQuestion() {
                const q = questions[currentQuestionIndex];
                locationImage.src = q.image;
                questionText.textContent = q.question;
                transcriptText.textContent = 'Waiting for your answer...';
                feedbackMessage.classList.remove('show', 'bg-green-500', 'bg-red-500');
                speakBtn.style.display = 'block';
                nextBtn.style.display = 'none';
                skipBtn.style.display = 'block';
                speakBtn.classList.remove('listening');
            }

            // --- Event listener for the Speak button ---
            speakBtn.addEventListener('click', () => {
                recognition.start();
                transcriptText.textContent = 'Listening... Please say the answer.';
                speakBtn.classList.add('listening');
            });
            
            // --- Event listener for the Skip button ---
            skipBtn.addEventListener('click', () => {
                currentQuestionIndex = (currentQuestionIndex + 1) % questions.length;
                loadQuestion();
            });

            // --- Speech recognition result event ---
            recognition.onresult = (event) => {
                const result = event.results[0][0].transcript;
                const currentCorrectAnswer = questions[currentQuestionIndex].correctAnswer;

                transcriptText.textContent = `You said: "${result}"`;

                if (isCloseMatch(result, currentCorrectAnswer)) {
                    feedbackMessage.textContent = 'Excellent! That is correct!';
                    feedbackMessage.className = 'feedback show bg-green-500';
                    nextBtn.style.display = 'block';
                    speakBtn.style.display = 'none';
                    skipBtn.style.display = 'none';
                } else {
                    feedbackMessage.textContent = 'Not quite right. Please try again!';
                    feedbackMessage.className = 'feedback show bg-red-500';
                    speakBtn.style.display = 'block';
                    skipBtn.style.display = 'block';
                }
            };
            
            // --- Speech recognition error event ---
            recognition.onerror = (event) => {
                transcriptText.textContent = 'An error occurred with speech recognition: ' + event.error;
                speakBtn.classList.remove('listening');
            };

            // --- Next button event listener ---
            nextBtn.addEventListener('click', () => {
                currentQuestionIndex = (currentQuestionIndex + 1) % questions.length;
                loadQuestion();
            });

            // --- Gemini API Call for more info ---
            geminiInfoBtn.addEventListener('click', async () => {
                const placeName = questions[currentQuestionIndex].correctAnswer;
                showModal('Fetching Information...', 'Please wait...');
                
                const prompt = `Write a short description (about 2-3 sentences) about the place named "${placeName}" in English, suitable for primary school students. The description should be interesting and easy to understand.`;

                const payload = {
                    contents: [{ parts: [{ text: prompt }] }],
                    tools: [{ "google_search": {} }],
                    systemInstruction: {
                        parts: [{ text: "You are a helpful teaching assistant specializing in history and landmarks." }]
                    }
                };

                try {
                    const response = await fetch(GENERATE_CONTENT_URL, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });
                    const result = await response.json();
                    const text = result?.candidates?.[0]?.content?.parts?.[0]?.text;
                    if (text) {
                        modalTitle.textContent = `More Info About ${placeName}`;
                        modalContent.textContent = text;
                    } else {
                        modalTitle.textContent = 'Error';
                        modalContent.textContent = 'Unable to retrieve information at this time.';
                    }
                } catch (error) {
                    modalTitle.textContent = 'Error';
                    modalContent.textContent = 'An error occurred with the connection: ' + error.message;
                }
            });

            // --- Gemini TTS API Call for text-to-speech ---
            readAloudBtn.addEventListener('click', async () => {
                const textToSpeak = questions[currentQuestionIndex].correctAnswer;
                if (!textToSpeak) return;

                const payload = {
                    contents: [{ parts: [{ text: textToSpeak }] }],
                    generationConfig: {
                        responseModalities: ["AUDIO"],
                        speechConfig: {
                            voiceConfig: {
                                prebuiltVoiceConfig: { voiceName: "Fenrir" }
                            }
                        }
                    },
                };
                
                try {
                    const response = await fetch(TTS_URL, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });
                    const result = await response.json();
                    const part = result?.candidates?.[0]?.content?.parts?.[0];
                    const audioData = part?.inlineData?.data;
                    const mimeType = part?.inlineData?.mimeType;

                    if (audioData && mimeType && mimeType.startsWith("audio/")) {
                        const base64ToArrayBuffer = (base64) => {
                            const binaryString = atob(base64);
                            const len = binaryString.length;
                            const bytes = new Uint8Array(len);
                            for (let i = 0; i < len; i++) {
                                bytes[i] = binaryString.charCodeAt(i);
                            }
                            return bytes.buffer;
                        };
                        const pcmToWav = (pcm16, sampleRate) => {
                            const dataLength = pcm16.length * 2;
                            const buffer = new ArrayBuffer(44 + dataLength);
                            const view = new DataView(buffer);
                            
                            // WAV header
                            writeString(view, 0, 'RIFF');
                            view.setUint32(4, 36 + dataLength, true);
                            writeString(view, 8, 'WAVE');
                            writeString(view, 12, 'fmt ');
                            view.setUint32(16, 16, true);
                            view.setUint16(20, 1, true); // PCM format
                            view.setUint16(22, 1, true); // Number of channels
                            view.setUint32(24, sampleRate, true);
                            view.setUint32(28, sampleRate * 2, true);
                            view.setUint16(32, 2, true);
                            view.setUint16(34, 16, true);
                            writeString(view, 36, 'data');
                            view.setUint32(40, dataLength, true);
                            
                            // PCM data
                            let offset = 44;
                            for (let i = 0; i < pcm16.length; i++, offset += 2) {
                                view.setInt16(offset, pcm16[i], true);
                            }
                            
                            return new Blob([view], { type: 'audio/wav' });
                        };
                        const writeString = (view, offset, string) => {
                            for (let i = 0; i < string.length; i++) {
                                view.setUint8(offset + i, string.charCodeAt(i));
                            }
                        };
                        const sampleRate = parseInt(mimeType.match(/rate=(\d+)/)[1], 10);
                        const pcmData = base64ToArrayBuffer(audioData);
                        const pcm16 = new Int16Array(pcmData);
                        const wavBlob = pcmToWav(pcm16, sampleRate);
                        const audioUrl = URL.createObjectURL(wavBlob);
                        const audio = new Audio(audioUrl);
                        audio.play();
                    } else {
                        console.error('Failed to get audio data.');
                    }
                } catch (error) {
                    console.error('Error fetching audio:', error);
                }
            });

            // --- Initial load ---
            window.onload = loadQuestion;
        }
    </script>
</body>
</html>
